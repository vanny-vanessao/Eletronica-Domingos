<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Novo Conserto</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/estilos/nv1.css">
</head>
<body>
    <div class="principal">
        <div class="cabecalho">
            <h1 class="logo">Novo Conserto</h1>
            <a href="/inicial" class="btn-voltar">
                <i class="fas fa-arrow-left"></i> Voltar
            </a>
        </div>
        <div class="container-fluid">
            
            </form>
            <form class="w-100" action="/pendentes/novo-conserto1" method="POST">
        
                <h4>Informações do Cliente</h4>

                <p>Nome</p>
                <input type="text" class="form-control" name="nome" id="campo_nome" placeholder="Nome completo">

                <p>CPF</p>
                <input type="text" class="form-control" name="cpf" id="cpf" placeholder="CPF (somente números)" maxlength="14" inputmode="numeric">

                <p>RG</p>
                <input type="text" class="form-control" name="rg" id="rg" placeholder="RG (somente números)" maxlength="12" inputmode="numeric">

                <p>Telefone</p>
                <input type="text" class="form-control" name="fone" id="fone" placeholder="Ex.: 48 91234-5678" maxlength="15" inputmode="numeric">

                <p>Observações</p>
                <input type="text" class="form-control" name="obs" placeholder="Ex.: Rigoroso, exigente, etc..">

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="entregaCheck" onchange="toggleEndereco()">
                    <label class="form-check-label" for="entregaCheck">
                        Entregar o aparelho no endereço
                    </label>
                </div>

                <div id="enderecoSection">
                    <h4>Endereço de Entrega</h4>

                    <p>Cidade</p>
                    <input type="text" class="form-control" name="cidade" placeholder="Cidade">

                    <p>Bairro</p>
                    <input type="text" class="form-control" name="bairro" placeholder="Bairro">

                    <p>Rua</p>
                    <input type="text" class="form-control" name="rua" placeholder="Rua, avenida, travessa...">

                    <p>Complemento</p>
                    <input type="text" class="form-control" name="complemento" placeholder="Complemento">

                    <p>Número</p>
                    <input type="text" class="form-control" name="numero" placeholder="Número">

                    <p>CEP</p>
                    <input type="text" class="form-control" name="CEP" placeholder="CEP (apenas números)" maxlength="8">

                    <p>UF</p>
                    <select class="form-control" name="UF">
                        <option value="Santa Catarina">SC</option>
                        <option value="Rio Grande do Sul">RS</option>
                        <option value="Paraná">PR</option>
                    </select>
                </div>

                <!-- Nova opção: cliente já cadastrado -->
                <div class="mb-3">
                    <label class="form-check-label" style="font-weight:600;">
                        <input type="checkbox" id="existingClientCheck"> Cliente já cadastrado?
                    </label>
                </div>

                <div id="existingClientSection" style="display:none; margin-bottom:12px;">
                    <label class="form-label">Buscar cliente por CPF</label>
                    <div style="position:relative;">
                        <input id="cpfSearch" class="form-control" type="text" placeholder="Digite o CPF (apenas números)" maxlength="14" inputmode="numeric" autocomplete="off">
                        <ul id="cpfSuggestions" style="list-style:none;margin:6px 0 0 0;padding:0;position:absolute;left:0;right:0;display:none;max-height:200px;overflow:auto;border:1px solid #ddd;background:#fff;z-index:1200;border-radius:6px;"></ul>
                    </div>
                    <input type="hidden" name="id_cliente_existing" id="id_cliente_existing" value="">
                    <div id="selectedClientInfo" style="margin-top:8px; display:none; padding:8px; border:1px solid #e6e6e6; border-radius:6px; background:#f8f9f8;"></div>

                    <!-- aviso quando nenhum CPF encontrado -->
                    <div id="cpfNotFound" style="display:none; margin-top:8px; color:#b00020; font-weight:600;">
                        CPF não encontrado. Verifique o CPF ou desmarque "Cliente já cadastrado?".
                    </div>
                </div>

                <div class="btn-container">
                    <button type="submit" class="btn btn-primary">Próximo</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        function toggleEndereco() {
            const checkBox = document.getElementById("entregaCheck");
            const enderecoSection = document.getElementById("enderecoSection");
            enderecoSection.style.display = checkBox.checked ? "block" : "none";
        }

        /* Máscara CPF / RG / Telefone (reutilizável) */
        (function(){
          function formatCPFValueRaw(v){
            return v.replace(/\D/g,'').slice(0,11);
          }
          function formatCPFDisplay(v){
            v = v.replace(/\D/g,'').slice(0,11);
            if (v.length > 9) v = v.replace(/(\d{3})(\d{3})(\d{3})(\d{1,2})/,"$1.$2.$3-$4");
            else if (v.length > 6) v = v.replace(/(\d{3})(\d{3})(\d{1,3})/,"$1.$2.$3");
            else if (v.length > 3) v = v.replace(/(\d{3})(\d{1,3})/,"$1.$2");
            return v;
          }
          function formatRGValue(v){
            v = v.replace(/\D/g,'').slice(0,9);
            if (v.length > 7) v = v.replace(/(\d{2})(\d{3})(\d{3})(\d{1})/,"$1.$2.$3-$4");
            else if (v.length > 5) v = v.replace(/(\d{2})(\d{3})(\d{1,3})/,"$1.$2.$3");
            else if (v.length > 2) v = v.replace(/(\d{2})(\d{1,3})/,"$1.$2");
            return v;
          }
          function formatFoneValue(v){
            v = v.replace(/\D/g,'').slice(0,11);
            if (v.length > 6) v = v.replace(/(\d{2})(\d{5})(\d{0,4})/,"$1 $2-$3");
            else if (v.length > 2) v = v.replace(/(\d{2})(\d{1,5})/,"$1 $2");
            return v.trim();
          }

          function attachFormatter(elId, formatter){
            const el = document.getElementById(elId);
            if (!el) return;
            el.addEventListener('input', function(e){
              const pos = el.selectionStart;
              const old = el.value;
              el.value = formatter(el.value);
              // tentativa simples de manter cursor
              const diff = el.value.length - old.length;
              el.selectionStart = el.selectionEnd = Math.max(0, pos + (diff>0?diff:0));
            });
            el.addEventListener('blur', function(){ el.value = formatter(el.value); });
          }

          attachFormatter('cpf', formatCPFDisplay);
          attachFormatter('cpfSearch', formatCPFDisplay); // máscara no campo de busca por CPF
          attachFormatter('rg', formatRGValue);
          attachFormatter('fone', formatFoneValue);
        })();

        /* Busca por CPF (debounce) e seleção de cliente */
        (function(){
          const check = document.getElementById('existingClientCheck');
          const section = document.getElementById('existingClientSection');
          const cpfSearch = document.getElementById('cpfSearch');
          const suggestions = document.getElementById('cpfSuggestions');
          const hiddenId = document.getElementById('id_cliente_existing');
          const selectedInfo = document.getElementById('selectedClientInfo');
          const cpfNotFound = document.getElementById('cpfNotFound');

          check.addEventListener('change', () => {
            if (check.checked) {
              section.style.display = 'block';
              cpfSearch.focus();
            } else {
              section.style.display = 'none';
              hiddenId.value = '';
              selectedInfo.style.display = 'none';
              // unlock fields
              unlockClientFields();
            }
          });

          function onlyDigits(v){ return v.replace(/\D/g,''); }

          let timer = null;
          cpfSearch.addEventListener('input', function(){
            clearTimeout(timer);
            const raw = onlyDigits(this.value);
            if (raw.length < 3) { suggestions.style.display='none'; return; } // aguarda mais dígitos
            timer = setTimeout(()=> searchByCpf(raw), 300);
          });

          async function searchByCpf(cpfDigits) {
            try {
              // backend endpoint esperado: /clientes?cpf=<digits>
              const res = await fetch('/clientes?cpf=' + encodeURIComponent(cpfDigits));
              if (!res.ok) { suggestions.style.display='none'; cpfNotFound.style.display='block'; return; }
              const data = await res.json();
              if (!Array.isArray(data) || data.length === 0) {
                suggestions.style.display='none';
                cpfNotFound.style.display='block';
                return;
              }
              // se encontrou, esconde aviso
              cpfNotFound.style.display='none';
              // popular lista de sugestões
              suggestions.innerHTML = '';
              data.forEach(c => {
                const li = document.createElement('li');
                li.style.padding = '8px';
                li.style.cursor = 'pointer';
                li.style.borderBottom = '1px solid #f0f0f0';
                li.textContent = (c.nome || '') + ' — CPF: ' + (c.cpf || '-') + (c.fone ? ' — ' + c.fone : '');
                li.dataset.client = JSON.stringify(c);
                li.addEventListener('click', () => {
                  const client = JSON.parse(li.dataset.client);
                  applyClientSelection(client);
                  suggestions.style.display='none';
                });
                suggestions.appendChild(li);
              });
              suggestions.style.display = 'block';
            } catch (err) {
              console.error('Erro buscando clientes por CPF', err);
              suggestions.style.display='none';
              cpfNotFound.style.display='block';
            }
          }

          function applyClientSelection(c) {
            hiddenId.value = c.id;
            selectedInfo.style.display = 'block';
            selectedInfo.innerHTML = `<strong>Selecionado:</strong> ${c.nome} <br>CPF: ${c.cpf || '-'} — RG: ${c.rg || '-'} — Fone: ${c.fone || '-'}`;
            // preencher e bloquear campos do formulário principal
            const nomeEl = document.getElementById('campo_nome');
            const cpfEl = document.getElementById('cpf');
            const rgEl = document.getElementById('rg');
            const foneEl = document.getElementById('fone');
            if (nomeEl) { nomeEl.value = c.nome || ''; nomeEl.readOnly = true; }
            if (cpfEl) { cpfEl.value = c.cpf || ''; cpfEl.readOnly = true; }
            if (rgEl) { rgEl.value = c.rg || ''; rgEl.readOnly = true; }
            if (foneEl) { foneEl.value = c.fone || ''; foneEl.readOnly = true; }
          }

          function unlockClientFields() {
            const nomeEl = document.getElementById('campo_nome');
            const cpfEl = document.getElementById('cpf');
            const rgEl = document.getElementById('rg');
            const foneEl = document.getElementById('fone');
            if (nomeEl) { nomeEl.readOnly = false; }
            if (cpfEl) { cpfEl.readOnly = false; }
            if (rgEl) { rgEl.readOnly = false; }
            if (foneEl) { foneEl.readOnly = false; }
          }

          // fechar sugestões ao clicar fora
          document.addEventListener('click', function(e){
            if (!section.contains(e.target)) suggestions.style.display='none';
          });

        })();

        // validação no submit: se marcou "Cliente já cadastrado?" e não escolheu cliente, impedir avanço
        (function(){
          const form = document.querySelector('form[action="/pendentes/novo-conserto1"]');
          if (!form) return;
          form.addEventListener('submit', function(e){
            const existingCheck = document.getElementById('existingClientCheck');
            const hiddenId = document.getElementById('id_cliente_existing');
            const cpfNotFound = document.getElementById('cpfNotFound');
            if (existingCheck && existingCheck.checked) {
              if (!hiddenId.value) {
                // mostra aviso e impede submit
                if (cpfNotFound) cpfNotFound.style.display = 'block';
                // foca o campo de busca
                const cpfSearch = document.getElementById('cpfSearch');
                if (cpfSearch) cpfSearch.focus();
                e.preventDefault();
                return false;
              }
            }
            // se tudo ok, permite submit (backend deve tratar id_cliente_existing ao criar ordem)
          });
        })();
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>